import chicos.*
import elementos.*
import adultos.*
import legion.*

test "La capacidad de susto es la suma de las de sus integrantes" {
	legionDelTerror.agregarIntegrantes([macaria,pancracio])
	assert.equals(18,legionDelTerror.capacidadSusto())
}

test "La capacidad de susto se modifica al modificar las de sus integrantes" {
	legionDelTerror.agregarIntegrantes([macaria,pancracio])
	macaria.disfrazar(barba)
	assert.equals(28,legionDelTerror.capacidadSusto())
}

test "Los caramelos son la suma de los de sus integrantes" {
	pedro.recibirCaramelos(3)
	macaria.recibirCaramelos(8) 
	pancracio.recibirCaramelos(4)
	legionDelTerror.agregarIntegrantes([pedro,macaria,pancracio])
	// aca en equals estaba "10" en el primer argumento, pero haciendo las cuentas
	// es imposible que de 10, tiene que dar 13
	// pedro -> se queda con los 3 caramelos
	// pancracio -> se queda con los 4
	// macaria -> pierde 1/4 de los que obtiene, osea, (8 - (8/4) = 6) 
	// 3 + 4 + 6 = 13
	assert.equals(13,legionDelTerror.caramelos())
}


test "El lider es quien tiene mayor capacidad de susto" {
	pancracio.disfrazar(mascaraFrankenstein)
	macaria.disfrazar(mascaraPolitico)
	legionDelTerror.agregarIntegrantes([pancracio,macaria])
	assert.equals(pancracio,legionDelTerror.lider())
}


test "El lider se lleva los caramelos" {
	pancracio.disfrazar(mascaraFrankenstein)
	macaria.disfrazar(mascaraPolitico)
	legionDelTerror.agregarIntegrantes([pancracio,macaria])
	mirca.serAsustadoPor(legionDelTerror)
	assert.that(pancracio.caramelos()>0)
}

test "La cantidad de caramelos recibida es correcta" {
	pancracio.disfrazar(mascaraFrankenstein)
	macaria.disfrazar(mascaraPolitico)
	legionDelTerror.agregarIntegrantes([pancracio,macaria])
	mirca.serAsustadoPor(legionDelTerror)
	assert.equals(24,legionDelTerror.caramelos()) 
}

test "Los 2 con mas caramelos" {
	pancracio.recibirCaramelos(10)
	macaria.recibirCaramelos(10)
	pedro.recibirCaramelos(10)
	barrio.chicos( [pedro,macaria,pancracio])
	// aca estaba "[pancracio, macaria]" pero no puede ser
	// xq si a los 3 les damos 10 caramelos, el unico objeto que pierde
	// es macaria, por lo tanto tiene que estar ultima en el array
	// los dos primeros siempre deberian ser pancracio y pedro o viceversa
	assert.equals([pancracio,pedro],barrio.chicosConMasCaramelos(2))
}

test "Ninguno muy asustador" {
	pedro.recibirCaramelos(10)
	barrio.chicos( [pedro,macaria,pancracio,pancracio,pedro,macaria,pedro])
	assert.notThat(barrio.algunoMuyAsustador())
}

test "Norma sin repetidos" {
	macaria.disfrazar(barba)
	pedro.disfrazar(mascaraDracula)
	pedro.disfrazar(mascaraFrankenstein)
	pedro.disfrazar(barba)
	legionDelTerror.agregarIntegrantes([pedro,macaria,pancracio])
	legionDelTerror.normaSinRepetidos()
	assert.notThat(legionDelTerror.disfracesRepetidos().contains(barba))
}

test "Norma sin repetidos no hace nada si un chico tiene muchas veces el mismo elemento" {
	macaria.disfrazar(barba)
	macaria.disfrazar(barba)
	pedro.disfrazar(mascaraDracula)
	pedro.disfrazar(mascaraFrankenstein)
	legionDelTerror.agregarIntegrantes([pedro,macaria,pancracio])
	legionDelTerror.normaSinRepetidos()
	assert.that(legionDelTerror.todosLosDisfraces().contains(barba))
}
